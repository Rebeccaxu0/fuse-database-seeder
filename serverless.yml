service: laravel

params:
  default:
    app_key: ${ssm:/laravel/app_key}
    cache_instance_size: cache.t3.micro
    certificate_arn: ${ssm:/laravel/certificate_arn}
    db_database: fuse
    db_host: ${ssm:/laravel/db_host}
    db_password: ${ssm:/laravel/db_pwd}
    db_port: ${ssm:/laravel/db_port}
    db_username: fuse
    debug: true
    private_route_table_1a_id: ${ssm:/laravel/private_route_table_1a_id}
    private_route_table_1b_id: ${ssm:/laravel/private_route_table_1b_id}
    private_subnet_1a_id: ${ssm:/laravel/private_subnet_1a_id}
    private_subnet_1b_id: ${ssm:/laravel/private_subnet_1b_id}
    private_subnet_db1_id: ${ssm:/laravel/private_subnet_db1_id}
    private_subnet_db2_id: ${ssm:/laravel/private_subnet_db2_id}
    public_route_table_id: ${ssm:/laravel/public_route_table_id}
    public_subnet_1a_id: ${ssm:/laravel/public_subnet_1a_id}
    public_subnet_1b_id: ${ssm:/laravel/public_subnet_1b_id}
    vpc_id: ${ssm:/laravel/vpc_id}
  dev:
    app_env: dev
    asset_bucket_name: dev.assets.fusestudio.net
    domain: dev.my.fusestudio.net
    profile: terraform-dev
  prod:
    app_env: production
    asset_bucket_name: assets.fusestudio.net
    domain: my.fusestudio.net
    debug: false
    profile: terraform-prod
  stage:
    app_env: local
    asset_bucket_name: stage.assets.fusestudio.net
    domain: stage.my.fusestudio.net
    profile: terraform-stage

provider:
  name: aws
  profile: ${param:profile}
  # The AWS region in which to deploy (us-east-1 is the default)
  region: us-east-2
  # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
  stage: ${opt:stage, 'stage'}
  runtime: provided.al2
  environment:
    APP_DEBUG: ${param:debug}
    APP_ENV: ${param:app_env}
    APP_KEY: ${param:app_key}
    APP_STORAGE: /tmp
    APP_URL: https://${param:domain}
    DB_DATABASE: ${param:db_database}
    DB_HOST: ${param:db_host}
    DB_PORT: ${param:db_port}
    DB_PASSWORD: ${param:db_password}
    DB_USERNAME: ${param:db_username}
    LOG_CHANNEL: stderr
    # Serve static assets via CloudFront
    ASSET_URL: https://${param:domain}
    LIVEWIRE_ASSET_URL: https://${param:domain}
    MIX_ASSET_URL: https://${param:domain}
    REDIS_HOST: !GetAtt ElasticCacheCluster.RedisEndpoint.Address
    SESSION_DRIVER: redis
    VIEW_COMPILED_PATH: /tmp/storage/framework/views

package:
  # Directories to exclude from deployment
  patterns:
    - '!node_modules/**'
    - '!public/storage'
    - '!resources/assets/**'
    - '!storage/**'
    - '!tests/**'

functions:

  # This function runs the Laravel website/API
  web:
    handler: public/index.php
    environment:
      APP_RUNTIME: octane
      BREF_LOOP_MAX: 250
      OCTANE_PERSIST_DATABASE_SESSIONS: 1
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-81-fpm}
      - ${bref-extra:newrelic-php-81}
      - ${bref-extra:redis-php-81}
    events:
      - httpApi: '*'
    vpc:
      securityGroupIds:
        - !GetAtt ServerlessSecurityGroup.GroupId
        - ${ssm:/laravel/mysql_security_group_id}
      subnetIds:
        - ${param:private_subnet_1a_id}
        - ${param:private_subnet_1b_id}
        - ${param:private_subnet_db1_id}
        - ${param:private_subnet_db2_id}

  # This function lets us run artisan commands in Lambda
  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-81} # PHP
        # - ${bref-extra:pgsql-php-81}
      - ${bref-extra:redis-php-81}
      - ${bref:layer.console} # The "console" layer
    vpc:
      securityGroupIds:
        - !GetAtt ServerlessSecurityGroup.GroupId
        - ${ssm:/laravel/mysql_security_group_id}
      subnetIds:
        - ${param:private_subnet_1a_id}
        - ${param:private_subnet_1b_id}
        - ${param:private_subnet_db1_id}
        - ${param:private_subnet_db2_id}

plugins:
  - ./vendor/bref/bref
  - ./vendor/bref/extra-php-extensions
  - serverless-lift

resources:
  Resources:
    SubnetRouteTableAssociationLambdaPrivateA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${param:private_subnet_1a_id}
        RouteTableId: ${param:private_route_table_1a_id}

    SubnetRouteTableAssociationLambdaPrivateB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${param:private_subnet_1b_id}
        RouteTableId: ${param:private_route_table_1b_id}

    SubnetRouteTableAssociationLambdaPublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: ${param:public_subnet_1a_id}
        RouteTableId: ${param:public_route_table_id}

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${param:vpc_id}

    ServerlessRedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Ingress for Redis Cluster
        VpcId: ${param:vpc_id}
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId:
            Ref: ServerlessSecurityGroup

    ServerlessCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: "Cache Subnet Group"
        SubnetIds:
          - ${param:private_subnet_1a_id}
          - ${param:private_subnet_1b_id}

    ElasticCacheCluster:
      DependsOn: ServerlessRedisSecurityGroup
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        AutoMinorVersionUpgrade: true
        CacheNodeType: ${param:cache_instance_size}
        CacheSubnetGroupName:
          Ref: ServerlessCacheSubnetGroup
        Engine: redis
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - !GetAtt ServerlessRedisSecurityGroup.GroupId

constructs:
  website:
    type: server-side-website
    assets:
      # Directories: routes must end with '/*'
      '/css/*': public/css
      '/img/*': public/img
      '/js/*': public/js
      '/vendor/*': public/vendor
      # Files:
      '/favicon.ico': public/favicon.ico
      '/mix-manifest.json': public/mix-manifest.json
      '/robots.txt': public/favicon.ico
    certificate: ${param:certificate_arn}
    domain: ${param:domain}
    forwardedHeaders:
      - Accept
      - Accept-Language
      - Authorization
      - Content-Type
      - Origin
      - Referer
      - User-Agent
      - X-Forwarded-Host
      - X-Requested-With
      - X-Csrf-Token
      - X-Livewire

