service: laravel

provider:
    name: aws
    profile: terraform-stage
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-2
    # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
    stage: stage
    runtime: provided.al2
    environment:
      REDIS_HOST: !GetAtt ElasticCacheCluster.RedisEndpoint.Address

package:
    # Directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'

functions:
    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-81-fpm}
        events:
            - httpApi: '*'
        vpc:
            securityGroupIds:
                - !GetAtt ServerlessSecurityGroup.GroupId
            subnetIds:
                - Ref: PrivateSubnetA
    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-81} # PHP
            - ${bref:layer.console} # The "console" layer
        vpc:
            securityGroupIds:
                - !GetAtt ServerlessSecurityGroup.GroupId
            subnetIds:
                - Ref: PrivateSubnetA

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref

resources:
    Resources:
        VPC:
            Type: AWS::EC2::VPC
            Properties:
                CidrBlock: "10.0.0.0/16"
        IP:
            Type: AWS::EC2::EIP
            Properties:
                Domain: vpc
        InternetGateway:
            Type: AWS::EC2::InternetGateway
        VPCGatewayAttachment:
            Type: AWS::EC2::VPCGatewayAttachment
            Properties:
                VpcId:
                    Ref: VPC
                InternetGatewayId:
                    Ref: InternetGateway
        NatGateway:
            Type: AWS::EC2::NatGateway
            Properties:
                AllocationId:
                    Fn::GetAtt:
                        - IP
                        - AllocationId
                SubnetId:
                    Ref: PublicSubnetA
        PublicSubnetA:
            DependsOn: VPC
            Type: AWS::EC2::Subnet
            Properties:
                VpcId:
                    Ref: VPC
                AvailabilityZone: ${self:provider.region}a
                CidrBlock: "10.0.2.0/24"
        PrivateRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId:
                    Ref: VPC
        PrivateRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId:
                    Ref: PrivateRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                NatGatewayId:
                    Ref: NatGateway
        PublicRouteTable:
            Type: AWS::EC2::RouteTable
            Properties:
                VpcId:
                    Ref: VPC
        PublicRoute:
            Type: AWS::EC2::Route
            Properties:
                RouteTableId:
                    Ref: PublicRouteTable
                DestinationCidrBlock: 0.0.0.0/0
                GatewayId:
                    Ref: InternetGateway
        SubnetRouteTableAssociationLambdaPrivateA:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId:
                    Ref: PrivateSubnetA
                RouteTableId:
                    Ref: PrivateRouteTable
        SubnetRouteTableAssociationLambdaPublicA:
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties:
                SubnetId:
                    Ref: PublicSubnetA
                RouteTableId:
                    Ref: PublicRouteTable
        PrivateSubnetA:
            DependsOn: VPC
            Type: AWS::EC2::Subnet
            Properties:
                VpcId:
                    Ref: VPC
                AvailabilityZone: ${self:provider.region}a
                CidrBlock: "10.0.1.0/24"
        ServerlessSecurityGroup:
            DependsOn: VPC
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: SecurityGroup for Serverless Functions
                VpcId:
                    Ref: VPC
        ServerlessStorageSecurityGroup:
            DependsOn: VPC
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: Ingress for Redis Cluster
                VpcId:
                    Ref: VPC
                SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '6379'
                  ToPort: '6379'
                  SourceSecurityGroupId:
                    Ref: ServerlessSecurityGroup
        ServerlessCacheSubnetGroup:
            Type: AWS::ElastiCache::SubnetGroup
            Properties:
                Description: "Cache Subnet Group"
                SubnetIds:
                    - Ref: PrivateSubnetA
        ElasticCacheCluster:
            DependsOn: ServerlessStorageSecurityGroup
            Type: AWS::ElastiCache::CacheCluster
            Properties:
                AutoMinorVersionUpgrade: true
                Engine: redis
                CacheNodeType: ${self:custom.config.CACHE_INSTANCE_SIZE}
                NumCacheNodes: 1
                VpcSecurityGroupIds:
                    - "Fn::GetAtt": ServerlessStorageSecurityGroup.GroupId
                CacheSubnetGroupName:
                    Ref: ServerlessCacheSubnetGroup

custom:
    config:
        CACHE_INSTANCE_SIZE: cache.t3.micro
